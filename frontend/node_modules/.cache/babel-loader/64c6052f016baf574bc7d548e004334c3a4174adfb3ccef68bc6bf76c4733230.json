{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\n// src/App.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TelaInicial from './components/TelaInicial';\nimport ConsultaPaciente from './components/ConsultaPaciente';\nimport FormularioMedico from './components/FormularioMedico';\nimport NavBar from './components/NavBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentPage, setCurrentPage] = useState('inicial');\n  const [pacientes, setPacientes] = useState([]);\n  const [userType, setUserType] = useState(null); // Corrigido para setUser Type\n\n  const buscarPacientes = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/pacientes');\n      setPacientes(response.data); // Atualiza a lista de pacientes\n    } catch (error) {\n      console.error('Erro ao buscar pacientes:', error);\n    }\n  };\n  useEffect(() => {\n    buscarPacientes();\n  }, []);\n  const handleSelectTipo = tipo => {\n    setUserType(tipo); // Atualiza o tipo de usuário\n    setCurrentPage(tipo === 'paciente' ? 'consulta' : 'formulario'); // Muda a página com base no tipo\n  };\n  const renderPage = () => {\n    switch (currentPage) {\n      case 'inicial':\n        return /*#__PURE__*/_jsxDEV(TelaInicial, {\n          onSelectTipo: handleSelectTipo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 16\n        }, this);\n      case 'consulta':\n        return /*#__PURE__*/_jsxDEV(ConsultaPaciente, {\n          userType: userType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 16\n        }, this);\n      // Passa userType se necessário\n      case 'formulario':\n        return /*#__PURE__*/_jsxDEV(FormularioMedico, {\n          pacientes: pacientes,\n          setPacientes: setPacientes,\n          buscarPacientes: buscarPacientes,\n          userType: userType // Passa userType se necessário\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(TelaInicial, {\n          onSelectTipo: handleSelectTipo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {\n      setCurrentPage: setCurrentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content\",\n      children: renderPage()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"NZAczHGJDPJpJsbrNKS1C/ARF4Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","TelaInicial","ConsultaPaciente","FormularioMedico","NavBar","jsxDEV","_jsxDEV","App","_s","currentPage","setCurrentPage","pacientes","setPacientes","userType","setUserType","buscarPacientes","response","get","data","error","console","handleSelectTipo","tipo","renderPage","onSelectTipo","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["// src/App.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport TelaInicial from './components/TelaInicial';\r\nimport ConsultaPaciente from './components/ConsultaPaciente';\r\nimport FormularioMedico from './components/FormularioMedico';\r\nimport NavBar from './components/NavBar';\r\n\r\nfunction App() {\r\n  const [currentPage, setCurrentPage] = useState('inicial');\r\n  const [pacientes, setPacientes] = useState([]);\r\n  const [userType, setUserType] = useState(null); // Corrigido para setUser Type\r\n\r\n  const buscarPacientes = async () => {\r\n    try {\r\n        const response = await axios.get('http://localhost:5000/pacientes');\r\n        setPacientes(response.data); // Atualiza a lista de pacientes\r\n    } catch (error) {\r\n        console.error('Erro ao buscar pacientes:', error);\r\n    }\r\n};\r\n\r\n  useEffect(() => {\r\n    buscarPacientes();\r\n  }, []);\r\n\r\n  const handleSelectTipo = (tipo) => {\r\n    setUserType(tipo); // Atualiza o tipo de usuário\r\n    setCurrentPage(tipo === 'paciente' ? 'consulta' : 'formulario'); // Muda a página com base no tipo\r\n  };\r\n\r\n  const renderPage = () => {\r\n    switch (currentPage) {\r\n      case 'inicial':\r\n        return <TelaInicial onSelectTipo={handleSelectTipo} />;\r\n      case 'consulta':\r\n        return <ConsultaPaciente userType={userType} />; // Passa userType se necessário\r\n      case 'formulario':\r\n        return (\r\n          <FormularioMedico\r\n            pacientes={pacientes}\r\n            setPacientes={setPacientes}\r\n            buscarPacientes={buscarPacientes}\r\n            userType={userType} // Passa userType se necessário\r\n          />\r\n        );\r\n      default:\r\n        return <TelaInicial onSelectTipo={handleSelectTipo} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <NavBar setCurrentPage={setCurrentPage} />\r\n      <div className=\"content\">\r\n        {renderPage()}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}